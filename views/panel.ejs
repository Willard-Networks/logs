<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("partials/head") %>
  <style>
    .context-modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.8);
    }

    .context-modal-content {
      background-color: #1a1a1a;
      margin: 5% auto;
      padding: 20px;
      padding-top: 40px; /* Add padding to account for fixed close button */
      width: 90%;
      max-width: 1200px;
      max-height: 90vh;
      overflow-y: auto;
      position: relative;
      color: #fff;
    }

    .close-modal {
      position: fixed;
      right: calc(5% + 20px); /* Align with modal content padding */
      top: calc(5% + 10px); /* Align with modal content top */
      color: #fff;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      background-color: #333;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1001;
    }

    .close-modal:hover {
      background-color: #555;
    }

    @media (max-width: 1200px) {
      .close-modal {
        right: 20px; /* For smaller screens, stick to the window edge */
      }
    }

    .context-section {
      margin: 15px 0;
      padding: 10px;
      border: 1px solid #333;
    }

    .context-section h3 {
      margin-top: 0;
      color: #007bff;
    }

    .target-log {
      background-color: #2d4373;
      border: 1px solid #385490;
    }

    .log-row {
      cursor: pointer;
    }

    .log-row:hover {
      background-color: #2d2d2d !important;
    }
    
    /* Styles for the filter container */
    .filter-container {
      background-color: #1a1a1a;
      padding: 10px 0;
      border-bottom: 1px solid #333;
      margin-bottom: 15px;
    }
    
    .filter-container .input-group-text {
      background-color: #007bff;
      color: white;
      border: none;
    }
    
    .filter-container .form-control {
      background-color: #333;
      color: #fff;
      border: 1px solid #444;
    }
    
    .filter-container .form-control:focus {
      background-color: #444;
      color: #fff;
      border-color: #007bff;
      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .filter-container .btn-clear {
      background-color: #555;
      color: white;
      border: none;
    }
    
    .filter-container .btn-clear:hover {
      background-color: #777;
    }
    
    /* Highlight matching text in filtered results */
    .highlight {
      background-color: #ffff00;
      color: #000;
      padding: 2px;
      border-radius: 2px;
    }
    
    /* Style for the "Show Only Selected User's Logs" button when active */
    #showOnlySelectedUserBtn.active {
      background-color: #28a745;
      border-color: #28a745;
    }
    
    /* Make the checkbox more visible */
    .form-check-input {
      width: 18px;
      height: 18px;
    }
    
    .form-check-label {
      padding-left: 5px;
      font-weight: bold;
    }
  </style>
</head>

<body>
  <%- include("partials/header") %>
  <div class="container pl-sm-0 pr-sm-0 pl-lg-3 pr-lg-3">
    <% 
      function timeConverter(UNIX_timestamp) {
          var isAfternoon = false;
          const a = new Date(UNIX_timestamp * 1000);
          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          const year = a.getFullYear();
          const month = months[a.getMonth()];
          const date = a.getDate();
          var hour = a.getHours();
          const min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();
          const sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();

          if (hour >= 12) {
              isAfternoon = true;
              hour = hour == 12 ? 12 : hour - 12;
          }

          return `${month} ${date}, ${year} ${hour}:${min}:${sec} ${isAfternoon ? 'PM' : 'AM'}`;
      }
    %>

    <form id="logForm" action="#" method="GET">
      <div class="form-group row">
        <div class="col">
          <input type="text" class="form-control" placeholder="Message" name="text">
        </div>
      </div>

      <div class="form-group row">
        <div class="col">
          <input type="text" class="form-control" placeholder="Steam ID" name="steamid">
        </div>
      </div>

    <div class="form-group row">
      <div class="col">
        <input type="text" class="form-control" id="datetime1" placeholder="After" name="after">
      </div>
    </div>

      <div class="form-group row">
        <div class="col">
          <input type="text" class="form-control" id="datetime2" placeholder="Before" name="before">
        </div>
      </div>

      <div class="form-group row">
        <div class="col">
          <button type="submit" class="btn btn-primary">Search</button>
        </div>
      </div>
    </form>
    
    <div class="form-group row">
      <div class="col">
        <a href="./download-logs" id="downloadBtn" class="btn btn-primary">Download current logs</a>
      </div>
    </div>

    <div>
      <table id="logTable" class="table table-dark table-striped table-bordered dt-responsive" style="width: 100;">
        <colgroup>
          <col class="id" />
          <col class="type" />
          <col class="log" />
          <col class="time" />
          <col class="steamid" />
          <col class="charid" />
        </colgroup>
        <thead>
          <tr>
            <th scope="col">ID</th>
            <th scope="col">Type</th>
            <th scope="col">Log</th>
            <th scope="col">Time</th>
            <th scope="col">Steam ID</th>
            <th scope="col">Character ID</th>
          </tr>
        </thead>
        <tbody>
          <% logs.forEach(function (log) { %>
          <tr class="log-row" data-log-id="<%= log.id %>">
            <th scope="log">
              <%= log.id %>
            </th>
            <td>
              <%= log.log_type %>
            </td>
            <td>
              <%= log.text %>
            </td>
            <td>
              <%= timeConverter(log.datetime) %>
            </td>
            <td>
              <% if (log.steamid !== undefined && log.steamid !== null && log.steamid !== '') { %>
              <% if (log.steamid.substring(0, 1) == '9') { %>
              SERVER
              <% } else { %>
              <a class="text-white" href="https://steamid.io/lookup/<%=log.steamid%>">
                <%= log.steamid %>
              </a>
              <% } %>
              <% } else { %>
                <%= 'SERVER' %>
              <% } %>
            </td>
            <td>
              <%= log.char_id %>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Context Modal -->
  <div id="contextModal" class="context-modal">
    <div class="context-modal-content">
      <span class="close-modal">&times;</span>
      
      <!-- Add filter inputs -->
      <div class="filter-container mb-3">
        <div class="row mb-2">
          <div class="col-md-4">
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text">Log Type:</span>
              </div>
              <input type="text" id="filterLogType" class="form-control" placeholder="Filter by log type...">
            </div>
          </div>
          <div class="col-md-8">
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text">Message:</span>
              </div>
              <input type="text" id="filterText" class="form-control" placeholder="Filter by message content...">
            </div>
          </div>
        </div>
        <div class="row mb-2">
          <div class="col-md-4">
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text">Steam ID:</span>
              </div>
              <input type="text" id="filterSteamID" class="form-control" placeholder="Filter by Steam ID...">
              <div class="input-group-append">
                <button class="btn btn-info" id="useTargetSteamID" type="button" title="Use selected user's Steam ID">
                  <i class="fas fa-user"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text">Character ID:</span>
              </div>
              <input type="text" id="filterCharID" class="form-control" placeholder="Filter by character ID...">
            </div>
          </div>
          <div class="col-md-4">
            <div class="d-flex align-items-center">
              <button id="showOnlySelectedUserBtn" class="btn btn-primary" type="button">
                Show Only Selected User's Logs
              </button>
            </div>
          </div>
        </div>
        <div class="row">
          <div class="col-12">
            <button class="btn btn-clear" id="clearAllFilters" type="button">Clear All Filters</button>
          </div>
        </div>
      </div>
      
      <div id="beforeContext" class="context-section">
        <h3>Before</h3>
        <div class="content"></div>
      </div>
      <div id="targetContext" class="context-section target-log">
        <h3>Selected Log</h3>
        <div class="content"></div>
      </div>
      <div id="afterContext" class="context-section">
        <h3>After</h3>
        <div class="content"></div>
      </div>
    </div>
  </div>

  <%- include("partials/footer") %> <%- include("partials/scripts") %>
  <script>
    $(document).ready(function () {
      const modal = document.getElementById('contextModal');
      const closeBtn = document.getElementsByClassName('close-modal')[0];
      
      $('#logTable').dataTable({
        "order": [[0, "desc"]]
      });

      // Update download button URL with current search parameters
      function updateDownloadUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        const downloadBtn = document.getElementById('downloadBtn');
        downloadBtn.href = './download-logs' + (urlParams.toString() ? '?' + urlParams.toString() : '');
      }

      // Update download URL on page load and after form submission
      updateDownloadUrl();
      $("#logForm").on("submit", function() {
        setTimeout(updateDownloadUrl, 100); // Small delay to ensure URL is updated
      });

      // Store the original context data for filtering
      let originalContextData = {
        before: [],
        target: null,
        after: []
      };

      // Handle filter inputs
      $('#filterLogType, #filterText, #filterSteamID, #filterCharID').on('input', function() {
        applyFilters();
      });
      
      // Track if we're showing only the selected user's logs
      let showingOnlySelectedUser = false;
      
      // Handle clear all filters button
      $('#clearAllFilters').on('click', function() {
        $('#filterLogType, #filterText, #filterSteamID, #filterCharID').val('');
        showingOnlySelectedUser = false;
        $('#showOnlySelectedUserBtn').text('Show Only Selected User\'s Logs').removeClass('active');
        applyFilters();
      });
      
      // Handle "Use selected user's Steam ID" button
      $('#useTargetSteamID').on('click', function() {
        if (originalContextData.target && originalContextData.target.steamid) {
          // Don't use SERVER steamids (those starting with 9)
          if (originalContextData.target.steamid.substring(0, 1) !== '9') {
            $('#filterSteamID').val(originalContextData.target.steamid);
            applyFilters();
          } else {
            // If it's a SERVER steamid, show a message or clear the field
            $('#filterSteamID').val('');
            alert('The selected log is from the SERVER, not a user.');
          }
        }
      });
      
      // Handle "Show Only Selected User's Logs" button
      $('#showOnlySelectedUserBtn').on('click', function() {
        // Clear other filters first
        $('#filterLogType, #filterText, #filterSteamID, #filterCharID').val('');
        
        // Toggle the state
        showingOnlySelectedUser = !showingOnlySelectedUser;
        
        // Apply filters
        applyFilters();
      });
      
      // Function to apply all filters
      function applyFilters() {
        if (!originalContextData.target) return; // No data to filter
        
        const filterLogType = $('#filterLogType').val().toLowerCase();
        const filterText = $('#filterText').val().toLowerCase();
        const filterSteamID = $('#filterSteamID').val();
        const filterCharID = $('#filterCharID').val();
        
        // Get target user's SteamID for the filter
        const targetSteamID = originalContextData.target.steamid;
        
        // Update UI to show which user we're filtering for
        if (showingOnlySelectedUser && targetSteamID) {
          if (targetSteamID.substring(0, 1) !== '9') { // Not SERVER
            $('#showOnlySelectedUserBtn').text(`Showing Only: ${targetSteamID}`).addClass('active');
          } else {
            $('#showOnlySelectedUserBtn').text('Showing Only: SERVER').addClass('active');
          }
        } else {
          $('#showOnlySelectedUserBtn').text('Show Only Selected User\'s Logs').removeClass('active');
        }
        
        // Filter the before logs
        let filteredBefore = originalContextData.before;
        
        // Apply SteamID filter if button is active
        if (showingOnlySelectedUser && targetSteamID) {
          filteredBefore = filteredBefore.filter(log => log.steamid === targetSteamID);
        }
        
        // Apply text filters
        if (filterLogType) {
          filteredBefore = filteredBefore.filter(log => 
            log.log_type.toLowerCase().includes(filterLogType)
          );
        }
        
        if (filterText) {
          filteredBefore = filteredBefore.filter(log => 
            log.text.toLowerCase().includes(filterText)
          );
        }
        
        if (filterSteamID) {
          filteredBefore = filteredBefore.filter(log => 
            log.steamid && log.steamid.includes(filterSteamID)
          );
        }
        
        if (filterCharID) {
          filteredBefore = filteredBefore.filter(log => 
            log.char_id && log.char_id.toString().includes(filterCharID)
          );
        }
        
        // Filter the after logs with the same logic
        let filteredAfter = originalContextData.after;
        
        // Apply SteamID filter if button is active
        if (showingOnlySelectedUser && targetSteamID) {
          filteredAfter = filteredAfter.filter(log => log.steamid === targetSteamID);
        }
        
        // Apply text filters
        if (filterLogType) {
          filteredAfter = filteredAfter.filter(log => 
            log.log_type.toLowerCase().includes(filterLogType)
          );
        }
        
        if (filterText) {
          filteredAfter = filteredAfter.filter(log => 
            log.text.toLowerCase().includes(filterText)
          );
        }
        
        if (filterSteamID) {
          filteredAfter = filteredAfter.filter(log => 
            log.steamid && log.steamid.includes(filterSteamID)
          );
        }
        
        if (filterCharID) {
          filteredAfter = filteredAfter.filter(log => 
            log.char_id && log.char_id.toString().includes(filterCharID)
          );
        }
        
        // Collect all active filters for highlighting
        const activeFilters = [];
        if (filterLogType) activeFilters.push(filterLogType);
        if (filterText) activeFilters.push(filterText);
        if (filterSteamID) activeFilters.push(filterSteamID);
        if (filterCharID) activeFilters.push(filterCharID);
        
        // Clear previous content
        $('#beforeContext .content').empty();
        $('#targetContext .content').empty();
        $('#afterContext .content').empty();

        // Create tables for each section
        const beforeTable = $('<table class="table table-dark table-striped">').appendTo('#beforeContext .content');
        const targetTable = $('<table class="table table-dark table-striped">').appendTo('#targetContext .content');
        const afterTable = $('<table class="table table-dark table-striped">').appendTo('#afterContext .content');

        // Add content
        filteredBefore.forEach(log => {
          beforeTable.append(formatLogRow(log, activeFilters));
        });
        
        if (originalContextData.target) {
          // Always show the target log, but still highlight matches
          targetTable.append(formatLogRow(originalContextData.target, activeFilters));
        }
        
        filteredAfter.forEach(log => {
          afterTable.append(formatLogRow(log, activeFilters));
        });
        
        // Update counts
        $('#beforeContext h3').text(`Before (${filteredBefore.length})`);
        $('#afterContext h3').text(`After (${filteredAfter.length})`);
      }

      // Format log data for display with optional highlighting
      function formatLogRow(log, activeFilters = []) {
        let steamidDisplay = log.steamid;
        if (log.steamid) {
          if (log.steamid.substring(0, 1) === '9') {
            steamidDisplay = 'SERVER';
          } else {
            steamidDisplay = `<a class="text-white" href="https://steamid.io/lookup/${log.steamid}">${log.steamid}</a>`;
          }
        } else {
          steamidDisplay = 'SERVER';
        }

        // Use the same time converter function as the EJS template
        function timeConverter(UNIX_timestamp) {
          var isAfternoon = false;
          const a = new Date(UNIX_timestamp * 1000);
          const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          const year = a.getFullYear();
          const month = months[a.getMonth()];
          const date = a.getDate();
          var hour = a.getHours();
          const min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();
          const sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();

          if (hour >= 12) {
            isAfternoon = true;
            hour = hour == 12 ? 12 : hour - 12;
          }

          return `${month} ${date}, ${year} ${hour}:${min}:${sec} ${isAfternoon ? 'PM' : 'AM'}`;
        }
        
        // Function to highlight matching text
        function highlightMatch(text, searchTerms) {
          if (!searchTerms || !searchTerms.length || typeof text !== 'string') return text;
          
          let result = text;
          searchTerms.forEach(term => {
            if (term && term.length > 0) {
              const regex = new RegExp(`(${term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
              result = result.replace(regex, '<span class="highlight">$1</span>');
            }
          });
          
          return result;
        }
        
        // Apply highlighting if search terms are provided
        let logText = log.text || '';
        let logType = log.log_type || '';
        // Add null check for char_id
        let charId = (log.char_id !== null && log.char_id !== undefined) ? log.char_id.toString() : '';
        
        if (activeFilters.length > 0) {
          logText = highlightMatch(logText, activeFilters);
          logType = highlightMatch(logType, activeFilters);
          charId = highlightMatch(charId, activeFilters);
          
          // Highlight steamid if it's not SERVER
          if (log.steamid && log.steamid.substring(0, 1) !== '9') {
            const highlightedSteamId = highlightMatch(log.steamid, activeFilters);
            if (highlightedSteamId !== log.steamid) {
              steamidDisplay = `<a class="text-white" href="https://steamid.io/lookup/${log.steamid}">${highlightedSteamId}</a>`;
            }
          }
        }

        return `
          <tr>
            <td>${log.id}</td>
            <td>${logType}</td>
            <td>${logText}</td>
            <td>${timeConverter(log.datetime)}</td>
            <td>${steamidDisplay}</td>
            <td>${charId}</td>
          </tr>
        `;
      }

      // Handle log row clicks
      $('.log-row').click(function() {
        const logId = $(this).data('log-id');
        
        // Clear all filters
        $('#filterLogType, #filterText, #filterSteamID, #filterCharID').val('');
        showingOnlySelectedUser = false;
        $('#showOnlySelectedUserBtn').text('Show Only Selected User\'s Logs').removeClass('active');
        
        // Fetch context logs
        fetch(`/panel/context/${logId}`)
          .then(response => response.json())
          .then(data => {
            // Store the original data for filtering
            originalContextData = data;
            
            // Display the logs without filtering
            applyFilters();
            
            // Show modal
            modal.style.display = 'block';
          })
          .catch(error => console.error('Error fetching context:', error));
      });

      // Close modal when clicking X
      closeBtn.onclick = function() {
        modal.style.display = 'none';
      }

      // Close modal when clicking outside
      window.onclick = function(event) {
        if (event.target === modal) {
          modal.style.display = 'none';
        }
      }

      $("form").submit(function () {
        $("input").each(function (index, obj) {
          if ($(obj).val() == "") {
            $(obj).remove();
          }
        });
      });

      $("#datetime1").focus(function () {
        $(this).attr({ type: 'datetime-local' });
      });

      $("#datetime2").focus(function () {
        $(this).attr({ type: 'datetime-local' });
      });
    });
  </script>
</body>

</html>
